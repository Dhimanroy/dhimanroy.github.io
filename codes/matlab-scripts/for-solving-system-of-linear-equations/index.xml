<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>For solving system of linear equations on Dhiman Roy</title><link>https://dhimanroy.github.io/codes/matlab-scripts/for-solving-system-of-linear-equations/</link><description>Recent content in For solving system of linear equations on Dhiman Roy</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 23 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://dhimanroy.github.io/codes/matlab-scripts/for-solving-system-of-linear-equations/index.xml" rel="self" type="application/rss+xml"/><item><title>Gauss elimination method</title><link>https://dhimanroy.github.io/codes/matlab-scripts/for-solving-system-of-linear-equations/by-gauss-elimination-method/</link><pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate><guid>https://dhimanroy.github.io/codes/matlab-scripts/for-solving-system-of-linear-equations/by-gauss-elimination-method/</guid><description>Script for Gauss Elimination method
This matlab script can solve a system of linear equations by Gauss elimination method with partial pivoting. Another fun fact is, this script can show the calculation steps. So, this script saves a lot of effort while preparing assignments.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% % Title: Gauss Elimination with partial pivoting % % Author: Dhiman Roy, Dept. of ME (BUET) % % Date: August 23, 2021 % % Licensed under Creative Commons % %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% clear; clc; global showSteps; showSteps = true; %can be true or false.</description></item><item><title>Gauss Jordan method</title><link>https://dhimanroy.github.io/codes/matlab-scripts/for-solving-system-of-linear-equations/by-gauss-jordan-method/</link><pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate><guid>https://dhimanroy.github.io/codes/matlab-scripts/for-solving-system-of-linear-equations/by-gauss-jordan-method/</guid><description>Script for Gauss Jordan method
This matlab script can solve a system of linear equations by Gauss Jordan method with partial pivoting. Another fun fact is, this script can show the calculation steps. So, this script saves a lot of effort while preparing assignments.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% % Title: Gauss Jordan with partial pivoting % % Author: Dhiman Roy, Dept. of ME (BUET) % % Date: August 23, 2021 % % Licensed under Creative Commons % %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% clear; clc; global showSteps; showSteps = true; %can be true or false.</description></item><item><title>Gauss Seidel method</title><link>https://dhimanroy.github.io/codes/matlab-scripts/for-solving-system-of-linear-equations/by-gauss-seidel-method/</link><pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate><guid>https://dhimanroy.github.io/codes/matlab-scripts/for-solving-system-of-linear-equations/by-gauss-seidel-method/</guid><description>Script for Gauss Seidel method
Will be updated soon.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% % Title: Gauss Seidel method % % Author: Dhiman Roy, Dept. of ME (BUET) % % Date: August 23, 2021 % % Licensed under Creative Commons % %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% clear; clc; global showSteps; showSteps = false; %true shows calculation steps A = input(&amp;#39;Please Enter the Co-efficient Matrix, A:\n&amp;#39; ); b = input(&amp;#39;Please Enter the Constants(Must be a column vector, b:\n&amp;#39;); solByGaussSiedel = gaussSeidel(A, b) function [x] = gaussSeidel(A, b) global showSteps; xIni = input(&amp;#34;Enter initial guesses (Must be a column vector:\n&amp;#34;); eLimit = input(&amp;#34;Enter tolerance:\n&amp;#34;); [m,n] = size(A); for k = 1: n-1 for p = k+1:n if abs(A(k,k) &amp;lt; A(p,k)) b([k p]) = b([p k]); A([k p],:) = A([p k],:); end end end check = ones(n,1); for i = 1:n if 2*abs(A(i,i)) &amp;lt; sum(abs(A(i,:))) check(i) = 0; end end if all(check) ~= 1 error(&amp;#34;Partial Pivoting does not make the coefficient matrix a diagonally dominant matrix.</description></item><item><title>Jacobi method</title><link>https://dhimanroy.github.io/codes/matlab-scripts/for-solving-system-of-linear-equations/by-jacobi-method/</link><pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate><guid>https://dhimanroy.github.io/codes/matlab-scripts/for-solving-system-of-linear-equations/by-jacobi-method/</guid><description>Script for Jacobi method
```matlab %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% % Title: Jacobi Method % % Author: Dhiman Roy, Dept. of ME (BUET) % % Date: August 23, 2021 % % Licensed under Creative Commons % %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
clear; clc; global showSteps; showSteps = false; %true shows calculation steps
A = input(&amp;lsquo;Please Enter the Co-efficient Matrix, A:\n&amp;rsquo; ); b = input(&amp;lsquo;Please Enter the Constants(Must be a column vector, b:\n&amp;rsquo;);
solByJacobi = jacobi(A, b)
function [x] = jacobi(A, b) global showSteps; xIni = input(&amp;ldquo;Enter initial guesses (Must be a column vector:\n&amp;rdquo;); eLimit = input(&amp;ldquo;Enter tolerance:\n&amp;rdquo;); [m,n] = size(A); for k = 1: n-1 for p = k+1:n if abs(A(k,k) &amp;lt; A(p,k)) b([k p]) = b([p k]); A([k p],:) = A([p k],:); end end end check = ones(n,1); for i = 1:n if 2*abs(A(i,i)) &amp;lt; sum(abs(A(i,:))) check(i) = 0; end end if all(check) ~= 1 error(&amp;ldquo;Partial pivoting does not make the coefficient matrix a diagonally dominant matrix.</description></item><item><title>Successive Over Relaxation method</title><link>https://dhimanroy.github.io/codes/matlab-scripts/for-solving-system-of-linear-equations/by-successive-over-relaxation-method/</link><pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate><guid>https://dhimanroy.github.io/codes/matlab-scripts/for-solving-system-of-linear-equations/by-successive-over-relaxation-method/</guid><description>Script for SOR method
```matlab %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% % Title: Jacobi Method % % Author: Dhiman Roy, Dept. of ME (BUET) % % Date: August 23, 2021 % % Licensed under Creative Commons % %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% clear; clc; global showSteps; showSteps = false; %true shows calculation steps
A = input(&amp;lsquo;Please Enter the Co-efficient Matrix, A:\n&amp;rsquo; ); b = input(&amp;lsquo;Please Enter the Constants(Must be a column vector, b:\n&amp;rsquo;);
solBySOR = sor(A, b)
function [x] = sor(A, b) global showSteps; xIni = input(&amp;ldquo;Enter initial guesses (Must be a column vector:\n&amp;rdquo;); eLimit = input(&amp;ldquo;Enter tolerance:\n&amp;rdquo;); w = input(&amp;ldquo;Enter Relaxation Factor:\n&amp;rdquo;);</description></item></channel></rss>